AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  product-service

  SAM Template for product-service
Parameters:
  AllowedOrigin:
    Type: 'String'
  BucketName:
    Type: 'String'

Globals:
  Function:
    Timeout: 5
    Tracing: Active
    AutoPublishAlias: live
    Runtime: python3.8
    MemorySize: 256
    Environment:
      Variables:
        LOG_LEVEL: "DEBUG"
        ALLOWED_ORIGIN: !Ref AllowedOrigin
        POWERTOOLS_SERVICE_NAME: product-mock
        POWERTOOLS_METRICS_NAMESPACE: ecommerce-app
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: !Sub "'${AllowedOrigin}'"

Resources:
  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: product-mock-service/
      Handler: get_product.lambda_handler
      Role: !GetAtt GetProductsRole.Arn
      Events:
        ListCart:
          Type: Api
          Properties:
            Path: /product/{product_id}
            Method: get

  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: product-mock-service/
      Handler: get_products.lambda_handler
      Role: !GetAtt GetProductsRole.Arn
      Events:
        ListCart:
          Type: Api
          Properties:
            Path: /product
            Method: get

  GetProductApiUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: /serverless-shopping-cart-demo/products/products-api-url
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  DynamoDBProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      TableName: aws-serverless-productdatabase
      TimeToLiveSpecification:
        AttributeName: expirationTime
        Enabled: True
        
  GetProductsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
            - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                
  DynamoDBProductReadPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: DynamoDBReadPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: [
              "dynamodb:GetItem",
              "dynamodb:Scan",
              "dynamodb:Query",
              "dynamodb:BatchGetItem",
              "dynamodb:DescribeTable"
              ]
            Resource:
              - !GetAtt DynamoDBProductTable.Arn
      Roles:
        - !Ref GetProductsRole

  ProductBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ScheduleProductFromS3Permission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ScheduleProductFromS3Function.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .txt

  ScheduleProductFromS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ScheduleProductFromS3Function
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      SourceAccount: !Ref AWS::AccountId

  ScheduleProductFromS3ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:  !Sub 'arn:aws:s3:::${BucketName}/*'

  ScheduleProductFromS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Handler: schedule_product_from_s3.lambda_handler
      Role: !GetAtt ScheduleProductFromS3ExecutionRole.Arn

Outputs:
  ProductApi:
    Description: "API Gateway endpoint URL for Prod stage for Product Mock Service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
